{"ast":null,"code":"import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"active\",\"activityState\",\"style\",\"enabled\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import Animated from\"react-native-web/dist/exports/Animated\";import View from\"react-native-web/dist/exports/View\";import React from'react';import{screensEnabled}from'../core';export const InnerScreen=View;export class NativeScreen extends React.Component{render(){let _this$props=this.props,{active,activityState,style,enabled=screensEnabled()}=_this$props,rest=_objectWithoutPropertiesLoose(_this$props,_excluded);if(enabled){if(active!==undefined&&activityState===undefined){activityState=active!==0?2:0;}return React.createElement(View,_extends({hidden:activityState===0,style:[style,{display:activityState!==0?'flex':'none'}]},rest));}return React.createElement(View,rest);}}const Screen=Animated.createAnimatedComponent(NativeScreen);export const ScreenContext=React.createContext(Screen);export default Screen;","map":{"version":3,"names":["React","screensEnabled","InnerScreen","View","NativeScreen","Component","render","_this$props","props","active","activityState","style","enabled","rest","_objectWithoutPropertiesLoose","_excluded","undefined","createElement","_extends","hidden","display","Screen","Animated","createAnimatedComponent","ScreenContext","createContext"],"sources":["/Users/jamescunningham/Desktop/safepath-sf/node_modules/react-native-screens/src/components/Screen.web.tsx"],"sourcesContent":["import { ScreenProps } from 'react-native-screens';\nimport { Animated, View } from 'react-native';\nimport React from 'react';\n\nimport { screensEnabled } from '../core';\n\nexport const InnerScreen = View;\n\n// We're using class component here because of the error from reanimated:\n// createAnimatedComponent` does not support stateless functional components; use a class component instead.\nexport class NativeScreen extends React.Component<ScreenProps> {\n  render(): JSX.Element {\n    let {\n      active,\n      activityState,\n      style,\n      enabled = screensEnabled(),\n      ...rest\n    } = this.props;\n\n    if (enabled) {\n      if (active !== undefined && activityState === undefined) {\n        activityState = active !== 0 ? 2 : 0; // change taken from index.native.tsx\n      }\n      return (\n        <View\n          // @ts-expect-error: hidden exists on web, but not in React Native\n          hidden={activityState === 0}\n          style={[style, { display: activityState !== 0 ? 'flex' : 'none' }]}\n          {...rest}\n        />\n      );\n    }\n\n    return <View {...rest} />;\n  }\n}\n\nconst Screen = Animated.createAnimatedComponent(NativeScreen);\n\nexport const ScreenContext = React.createContext(Screen);\n\nexport default Screen;\n"],"mappings":"yjBAEA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,OAASC,cAAc,KAAQ,SAAS,CAExC,MAAO,MAAM,CAAAC,WAAW,CAAGC,IAAI,CAI/B,MAAO,MAAM,CAAAC,YAAY,QAAS,CAAAJ,KAAK,CAACK,SAAuB,CAC7DC,MAAMA,CAAA,CAAgB,CACpB,IAAAC,WAAA,CAMI,IAAI,CAACC,KAAK,CANV,CACFC,MAAM,CACNC,aAAa,CACbC,KAAK,CACLC,OAAO,CAAGX,cAAc,CAAC,CAE3B,CAAC,CAAAM,WAAA,CADIM,IAAA,CAAAC,6BAAA,CAAAP,WAAA,CAAAQ,SAAA,EAGL,GAAIH,OAAO,CAAE,CACX,GAAIH,MAAM,GAAKO,SAAS,EAAIN,aAAa,GAAKM,SAAS,CAAE,CACvDN,aAAa,CAAGD,MAAM,GAAK,CAAC,CAAG,CAAC,CAAG,CAAC,CACtC,CACA,MACE,CAAAT,KAAA,CAAAiB,aAAA,CAACd,IAAA,CACCe,QAAA,EACAC,MAAM,CAAET,aAAa,GAAK,CAAE,CAC5BC,KAAK,CAAE,CAACA,KAAK,CAAE,CAAES,OAAO,CAAEV,aAAa,GAAK,CAAC,CAAG,MAAM,CAAG,MAAO,CAAC,CAAE,EAC/DG,IAAI,CACT,CAAC,CAEN,CAEA,MAAO,CAAAb,KAAA,CAAAiB,aAAA,CAACd,IAAI,CAAKU,IAAO,CAAC,CAC3B,CACF,CAEA,KAAM,CAAAQ,MAAM,CAAGC,QAAQ,CAACC,uBAAuB,CAACnB,YAAY,CAAC,CAE7D,MAAO,MAAM,CAAAoB,aAAa,CAAGxB,KAAK,CAACyB,aAAa,CAACJ,MAAM,CAAC,CAExD,cAAe,CAAAA,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}