{"ast":null,"code":"import{PermissionStatus,createPermissionHook,Platform}from'expo-modules-core';import ExpoLocation from'./ExpoLocation';import{LocationAccuracy,LocationActivityType,LocationGeofencingEventType,LocationGeofencingRegionState}from'./Location.types';import{LocationEventEmitter}from'./LocationEventEmitter';import{LocationSubscriber,HeadingSubscriber,_getCurrentWatchId}from'./LocationSubscribers';function setGoogleApiKey(_apiKey){}export async function getProviderStatusAsync(){return ExpoLocation.getProviderStatusAsync();}export async function enableNetworkProviderAsync(){if(false){return ExpoLocation.enableNetworkProviderAsync();}}export async function getCurrentPositionAsync(options={}){return ExpoLocation.getCurrentPositionAsync(options);}export async function getLastKnownPositionAsync(options={}){return ExpoLocation.getLastKnownPositionAsync(options);}export async function watchPositionAsync(options,callback){const watchId=LocationSubscriber.registerCallback(callback);await ExpoLocation.watchPositionImplAsync(watchId,options);return{remove(){LocationSubscriber.unregisterCallback(watchId);}};}export async function getHeadingAsync(){return new Promise(async resolve=>{let tries=0;const subscription=await watchHeadingAsync(heading=>{if(heading.accuracy>1||tries>5){subscription.remove();resolve(heading);}else{tries+=1;}});});}export async function watchHeadingAsync(callback){const watchId=HeadingSubscriber.registerCallback(callback);await ExpoLocation.watchDeviceHeading(watchId);return{remove(){HeadingSubscriber.unregisterCallback(watchId);}};}export async function geocodeAsync(address,options){if(typeof address!=='string'){throw new TypeError(`Address to geocode must be a string. Got ${address} instead.`);}if(options?.useGoogleMaps||true){if(false){console.warn('The Geocoding API has been removed in SDK 49, use Place Autocomplete service instead'+'(https://developers.google.com/maps/documentation/places/web-service/autocomplete)');}return[];}return await ExpoLocation.geocodeAsync(address);}export async function reverseGeocodeAsync(location,options){if(typeof location.latitude!=='number'||typeof location.longitude!=='number'){throw new TypeError('Location to reverse-geocode must be an object with number properties `latitude` and `longitude`.');}if(options?.useGoogleMaps||true){if(false){console.warn('The Geocoding API has been removed in SDK 49, use Place Autocomplete service instead'+'(https://developers.google.com/maps/documentation/places/web-service/autocomplete)');}return[];}return await ExpoLocation.reverseGeocodeAsync(location);}export async function getPermissionsAsync(){console.warn(`\"getPermissionsAsync()\" is now deprecated. Please use \"getForegroundPermissionsAsync()\" or \"getBackgroundPermissionsAsync()\" instead.`);return await ExpoLocation.getPermissionsAsync();}export async function requestPermissionsAsync(){console.warn(`\"requestPermissionsAsync()\" is now deprecated. Please use \"requestForegroundPermissionsAsync()\" or \"requestBackgroundPermissionsAsync()\" instead.`);return await ExpoLocation.requestPermissionsAsync();}export async function getForegroundPermissionsAsync(){return await ExpoLocation.getForegroundPermissionsAsync();}export async function requestForegroundPermissionsAsync(){return await ExpoLocation.requestForegroundPermissionsAsync();}export const useForegroundPermissions=createPermissionHook({getMethod:getForegroundPermissionsAsync,requestMethod:requestForegroundPermissionsAsync});export async function getBackgroundPermissionsAsync(){return await ExpoLocation.getBackgroundPermissionsAsync();}export async function requestBackgroundPermissionsAsync(){return await ExpoLocation.requestBackgroundPermissionsAsync();}export const useBackgroundPermissions=createPermissionHook({getMethod:getBackgroundPermissionsAsync,requestMethod:requestBackgroundPermissionsAsync});export async function hasServicesEnabledAsync(){return await ExpoLocation.hasServicesEnabledAsync();}function _validateTaskName(taskName){if(!taskName||typeof taskName!=='string'){throw new Error(`\\`taskName\\` must be a non-empty string. Got ${taskName} instead.`);}}export async function isBackgroundLocationAvailableAsync(){const providerStatus=await getProviderStatusAsync();return providerStatus.backgroundModeEnabled;}export async function startLocationUpdatesAsync(taskName,options={accuracy:LocationAccuracy.Balanced}){_validateTaskName(taskName);await ExpoLocation.startLocationUpdatesAsync(taskName,options);}export async function stopLocationUpdatesAsync(taskName){_validateTaskName(taskName);await ExpoLocation.stopLocationUpdatesAsync(taskName);}export async function hasStartedLocationUpdatesAsync(taskName){_validateTaskName(taskName);return ExpoLocation.hasStartedLocationUpdatesAsync(taskName);}function _validateRegions(regions){if(!regions||regions.length===0){throw new Error('Regions array cannot be empty. Use `stopGeofencingAsync` if you want to stop geofencing all regions');}for(const region of regions){if(typeof region.latitude!=='number'){throw new TypeError(`Region's latitude must be a number. Got '${region.latitude}' instead.`);}if(typeof region.longitude!=='number'){throw new TypeError(`Region's longitude must be a number. Got '${region.longitude}' instead.`);}if(typeof region.radius!=='number'){throw new TypeError(`Region's radius must be a number. Got '${region.radius}' instead.`);}}}export async function startGeofencingAsync(taskName,regions=[]){_validateTaskName(taskName);_validateRegions(regions);await ExpoLocation.startGeofencingAsync(taskName,{regions});}export async function stopGeofencingAsync(taskName){_validateTaskName(taskName);await ExpoLocation.stopGeofencingAsync(taskName);}export async function hasStartedGeofencingAsync(taskName){_validateTaskName(taskName);return ExpoLocation.hasStartedGeofencingAsync(taskName);}export{LocationEventEmitter as EventEmitter,_getCurrentWatchId};export{LocationAccuracy as Accuracy,LocationActivityType as ActivityType,LocationGeofencingEventType as GeofencingEventType,LocationGeofencingRegionState as GeofencingRegionState,PermissionStatus,setGoogleApiKey};export{installWebGeolocationPolyfill}from'./GeolocationPolyfill';export*from'./Location.types';","map":{"version":3,"names":["PermissionStatus","createPermissionHook","Platform","ExpoLocation","LocationAccuracy","LocationActivityType","LocationGeofencingEventType","LocationGeofencingRegionState","LocationEventEmitter","LocationSubscriber","HeadingSubscriber","_getCurrentWatchId","setGoogleApiKey","_apiKey","getProviderStatusAsync","enableNetworkProviderAsync","getCurrentPositionAsync","options","getLastKnownPositionAsync","watchPositionAsync","callback","watchId","registerCallback","watchPositionImplAsync","remove","unregisterCallback","getHeadingAsync","Promise","resolve","tries","subscription","watchHeadingAsync","heading","accuracy","watchDeviceHeading","geocodeAsync","address","TypeError","useGoogleMaps","console","warn","reverseGeocodeAsync","location","latitude","longitude","getPermissionsAsync","requestPermissionsAsync","getForegroundPermissionsAsync","requestForegroundPermissionsAsync","useForegroundPermissions","getMethod","requestMethod","getBackgroundPermissionsAsync","requestBackgroundPermissionsAsync","useBackgroundPermissions","hasServicesEnabledAsync","_validateTaskName","taskName","Error","isBackgroundLocationAvailableAsync","providerStatus","backgroundModeEnabled","startLocationUpdatesAsync","Balanced","stopLocationUpdatesAsync","hasStartedLocationUpdatesAsync","_validateRegions","regions","length","region","radius","startGeofencingAsync","stopGeofencingAsync","hasStartedGeofencingAsync","EventEmitter","Accuracy","ActivityType","GeofencingEventType","GeofencingRegionState","installWebGeolocationPolyfill"],"sources":["/Users/jamescunningham/Desktop/safepath-sf/node_modules/expo-location/src/Location.ts"],"sourcesContent":["import {\n  PermissionStatus,\n  PermissionResponse,\n  PermissionHookOptions,\n  createPermissionHook,\n  Platform,\n} from 'expo-modules-core';\n\nimport ExpoLocation from './ExpoLocation';\nimport {\n  LocationAccuracy,\n  LocationCallback,\n  LocationGeocodedAddress,\n  LocationGeocodedLocation,\n  LocationHeadingCallback,\n  LocationHeadingObject,\n  LocationLastKnownOptions,\n  LocationObject,\n  LocationOptions,\n  LocationPermissionResponse,\n  LocationProviderStatus,\n  LocationRegion,\n  LocationSubscription,\n  LocationTaskOptions,\n  LocationActivityType,\n  LocationGeofencingEventType,\n  LocationGeofencingRegionState,\n  LocationGeocodingOptions,\n} from './Location.types';\nimport { LocationEventEmitter } from './LocationEventEmitter';\nimport { LocationSubscriber, HeadingSubscriber, _getCurrentWatchId } from './LocationSubscribers';\n\n// @needsAudit\n/**\n * @deprecated The Geocoding web api is no longer available from SDK 49 onwards. Use [Place Autocomplete](https://developers.google.com/maps/documentation/places/web-service/autocomplete) instead.\n * @param _apiKey Google API key obtained from Google API Console. This API key must have `Geocoding API`\n * enabled, otherwise your geocoding requests will be denied.\n */\nfunction setGoogleApiKey(_apiKey: string) {}\n\n// @needsAudit\n/**\n * Check status of location providers.\n * @return A promise which fulfills with an object of type [LocationProviderStatus](#locationproviderstatus).\n */\nexport async function getProviderStatusAsync(): Promise<LocationProviderStatus> {\n  return ExpoLocation.getProviderStatusAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to turn on high accuracy location mode which enables network provider that uses\n * Google Play services to improve location accuracy and location-based services.\n * @return A promise resolving as soon as the user accepts the dialog. Rejects if denied.\n */\nexport async function enableNetworkProviderAsync(): Promise<void> {\n  // If network provider is disabled (user's location mode is set to \"Device only\"),\n  // Android's location provider may not give you any results. Use this method in order to ask the user\n  // to change the location mode to \"High accuracy\" which uses Google Play services and enables network provider.\n  // `getCurrentPositionAsync` and `watchPositionAsync` are doing it automatically anyway.\n\n  if (Platform.OS === 'android') {\n    return ExpoLocation.enableNetworkProviderAsync();\n  }\n}\n\n// @needsAudit\n/**\n * Requests for one-time delivery of the user's current location.\n * Depending on given `accuracy` option it may take some time to resolve,\n * especially when you're inside a building.\n * > __Note:__ Calling it causes the location manager to obtain a location fix which may take several\n * > seconds. Consider using [`Location.getLastKnownPositionAsync`](#locationgetlastknownpositionasyncoptions)\n * > if you expect to get a quick response and high accuracy is not required.\n * @param options\n * @return A promise which fulfills with an object of type [`LocationObject`](#locationobject).\n */\nexport async function getCurrentPositionAsync(\n  options: LocationOptions = {}\n): Promise<LocationObject> {\n  return ExpoLocation.getCurrentPositionAsync(options);\n}\n\n// @needsAudit\n/**\n * Gets the last known position of the device or `null` if it's not available or doesn't match given\n * requirements such as maximum age or required accuracy.\n * It's considered to be faster than `getCurrentPositionAsync` as it doesn't request for the current\n * location, but keep in mind the returned location may not be up-to-date.\n * @param options\n * @return A promise which fulfills with an object of type [LocationObject](#locationobject) or\n * `null` if it's not available or doesn't match given requirements such as maximum age or required\n * accuracy.\n */\nexport async function getLastKnownPositionAsync(\n  options: LocationLastKnownOptions = {}\n): Promise<LocationObject | null> {\n  return ExpoLocation.getLastKnownPositionAsync(options);\n}\n\n// @needsAudit\n/**\n * Subscribe to location updates from the device. Please note that updates will only occur while the\n * application is in the foreground. To get location updates while in background you'll need to use\n * [Location.startLocationUpdatesAsync](#locationstartlocationupdatesasynctaskname-options).\n * @param options\n * @param callback This function is called on each location update. It receives an object of type\n * [`LocationObject`](#locationobject) as the first argument.\n * @return A promise which fulfills with a [`LocationSubscription`](#locationsubscription) object.\n */\nexport async function watchPositionAsync(\n  options: LocationOptions,\n  callback: LocationCallback\n): Promise<LocationSubscription> {\n  const watchId = LocationSubscriber.registerCallback(callback);\n  await ExpoLocation.watchPositionImplAsync(watchId, options);\n\n  return {\n    remove() {\n      LocationSubscriber.unregisterCallback(watchId);\n    },\n  };\n}\n\n// @needsAudit\n/**\n * Gets the current heading information from the device. To simplify, it calls `watchHeadingAsync`\n * and waits for a couple of updates, and then returns the one that is accurate enough.\n * @return A promise which fulfills with an object of type [LocationHeadingObject](#locationheadingobject).\n */\nexport async function getHeadingAsync(): Promise<LocationHeadingObject> {\n  return new Promise(async (resolve) => {\n    let tries = 0;\n\n    const subscription = await watchHeadingAsync((heading) => {\n      if (heading.accuracy > 1 || tries > 5) {\n        subscription.remove();\n        resolve(heading);\n      } else {\n        tries += 1;\n      }\n    });\n  });\n}\n\n// @needsAudit\n/**\n * Subscribe to compass updates from the device.\n * @param callback This function is called on each compass update. It receives an object of type\n * [LocationHeadingObject](#locationheadingobject) as the first argument.\n * @return A promise which fulfills with a [`LocationSubscription`](#locationsubscription) object.\n */\nexport async function watchHeadingAsync(\n  callback: LocationHeadingCallback\n): Promise<LocationSubscription> {\n  const watchId = HeadingSubscriber.registerCallback(callback);\n  await ExpoLocation.watchDeviceHeading(watchId);\n\n  return {\n    remove() {\n      HeadingSubscriber.unregisterCallback(watchId);\n    },\n  };\n}\n\n// @needsAudit\n/**\n * Geocode an address string to latitude-longitude location.\n * > **Note**: Using the Geocoding web api is no longer supported. Use [Place Autocomplete](https://developers.google.com/maps/documentation/places/web-service/autocomplete) instead.\n *\n * > **Note**: Geocoding is resource consuming and has to be used reasonably. Creating too many\n * > requests at a time can result in an error, so they have to be managed properly.\n * > It's also discouraged to use geocoding while the app is in the background and its results won't\n * > be shown to the user immediately.\n *\n * > On Android, you must request a location permission (`Permissions.LOCATION`) from the user\n * > before geocoding can be used.\n * @param address A string representing address, eg. `\"Baker Street London\"`.\n * @param options\n * @return A promise which fulfills with an array (in most cases its size is 1) of [`LocationGeocodedLocation`](#locationgeocodedlocation) objects.\n */\nexport async function geocodeAsync(\n  address: string,\n  options?: LocationGeocodingOptions\n): Promise<LocationGeocodedLocation[]> {\n  if (typeof address !== 'string') {\n    throw new TypeError(`Address to geocode must be a string. Got ${address} instead.`);\n  }\n\n  if (options?.useGoogleMaps || Platform.OS === 'web') {\n    if (__DEV__) {\n      console.warn(\n        'The Geocoding API has been removed in SDK 49, use Place Autocomplete service instead' +\n          '(https://developers.google.com/maps/documentation/places/web-service/autocomplete)'\n      );\n    }\n    return [];\n  }\n\n  return await ExpoLocation.geocodeAsync(address);\n}\n\n// @needsAudit\n/**\n * Reverse geocode a location to postal address.\n * > **Note**: Using the Geocoding web api is no longer supported. Use [Place Autocomplete](https://developers.google.com/maps/documentation/places/web-service/autocomplete) instead.\n *\n * > **Note**: Geocoding is resource consuming and has to be used reasonably. Creating too many\n * > requests at a time can result in an error, so they have to be managed properly.\n * > It's also discouraged to use geocoding while the app is in the background and its results won't\n * > be shown to the user immediately.\n *\n * > On Android, you must request a location permission (`Permissions.LOCATION`) from the user\n * > before geocoding can be used.\n * @param location An object representing a location.\n * @param options\n * @return A promise which fulfills with an array (in most cases its size is 1) of [`LocationGeocodedAddress`](#locationgeocodedaddress) objects.\n */\nexport async function reverseGeocodeAsync(\n  location: Pick<LocationGeocodedLocation, 'latitude' | 'longitude'>,\n  options?: LocationGeocodingOptions\n): Promise<LocationGeocodedAddress[]> {\n  if (typeof location.latitude !== 'number' || typeof location.longitude !== 'number') {\n    throw new TypeError(\n      'Location to reverse-geocode must be an object with number properties `latitude` and `longitude`.'\n    );\n  }\n\n  if (options?.useGoogleMaps || Platform.OS === 'web') {\n    if (__DEV__) {\n      console.warn(\n        'The Geocoding API has been removed in SDK 49, use Place Autocomplete service instead' +\n          '(https://developers.google.com/maps/documentation/places/web-service/autocomplete)'\n      );\n    }\n    return [];\n  }\n\n  return await ExpoLocation.reverseGeocodeAsync(location);\n}\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing location.\n * @return A promise that fulfills with an object of type [LocationPermissionResponse](#locationpermissionresponse).\n * @deprecated Use [`getForegroundPermissionsAsync`](#locationgetforegroundpermissionsasync) or [`getBackgroundPermissionsAsync`](#locationgetbackgroundpermissionsasync) instead.\n */\nexport async function getPermissionsAsync(): Promise<LocationPermissionResponse> {\n  console.warn(\n    `\"getPermissionsAsync()\" is now deprecated. Please use \"getForegroundPermissionsAsync()\" or \"getBackgroundPermissionsAsync()\" instead.`\n  );\n  return await ExpoLocation.getPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for location.\n * @return A promise that fulfills with an object of type [LocationPermissionResponse](#locationpermissionresponse).\n * @deprecated Use [`requestForegroundPermissionsAsync`](#locationrequestforegroundpermissionsasync) or [`requestBackgroundPermissionsAsync`](#locationrequestbackgroundpermissionsasync) instead.\n */\nexport async function requestPermissionsAsync(): Promise<LocationPermissionResponse> {\n  console.warn(\n    `\"requestPermissionsAsync()\" is now deprecated. Please use \"requestForegroundPermissionsAsync()\" or \"requestBackgroundPermissionsAsync()\" instead.`\n  );\n\n  return await ExpoLocation.requestPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing location while the app is in the foreground.\n * @return A promise that fulfills with an object of type [PermissionResponse](#permissionresponse).\n */\nexport async function getForegroundPermissionsAsync(): Promise<LocationPermissionResponse> {\n  return await ExpoLocation.getForegroundPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for location while the app is in the foreground.\n * @return A promise that fulfills with an object of type [PermissionResponse](#permissionresponse).\n */\nexport async function requestForegroundPermissionsAsync(): Promise<LocationPermissionResponse> {\n  return await ExpoLocation.requestForegroundPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Check or request permissions for the foreground location.\n * This uses both `requestForegroundPermissionsAsync` and `getForegroundPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = Location.useForegroundPermissions();\n * ```\n */\nexport const useForegroundPermissions = createPermissionHook({\n  getMethod: getForegroundPermissionsAsync,\n  requestMethod: requestForegroundPermissionsAsync,\n});\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing location while the app is in the background.\n * @return A promise that fulfills with an object of type [PermissionResponse](#permissionresponse).\n */\nexport async function getBackgroundPermissionsAsync(): Promise<PermissionResponse> {\n  return await ExpoLocation.getBackgroundPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for location while the app is in the background.\n * On __Android 11 or higher__: this method will open the system settings page - before that happens\n * you should explain to the user why your application needs background location permission.\n * For example, you can use `Modal` component from `react-native` to do that.\n * > __Note__: Foreground permissions should be granted before asking for the background permissions\n * (your app can't obtain background permission without foreground permission).\n * @return A promise that fulfills with an object of type [PermissionResponse](#permissionresponse).\n */\nexport async function requestBackgroundPermissionsAsync(): Promise<PermissionResponse> {\n  return await ExpoLocation.requestBackgroundPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Check or request permissions for the background location.\n * This uses both `requestBackgroundPermissionsAsync` and `getBackgroundPermissionsAsync` to\n * interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = Location.useBackgroundPermissions();\n * ```\n */\nexport const useBackgroundPermissions = createPermissionHook({\n  getMethod: getBackgroundPermissionsAsync,\n  requestMethod: requestBackgroundPermissionsAsync,\n});\n\n// --- Location service\n\n// @needsAudit\n/**\n * Checks whether location services are enabled by the user.\n * @return A promise which fulfills to `true` if location services are enabled on the device,\n * or `false` if not.\n */\nexport async function hasServicesEnabledAsync(): Promise<boolean> {\n  return await ExpoLocation.hasServicesEnabledAsync();\n}\n\n// --- Background location updates\n\nfunction _validateTaskName(taskName: string) {\n  if (!taskName || typeof taskName !== 'string') {\n    throw new Error(`\\`taskName\\` must be a non-empty string. Got ${taskName} instead.`);\n  }\n}\n\n// @docsMissing\nexport async function isBackgroundLocationAvailableAsync(): Promise<boolean> {\n  const providerStatus = await getProviderStatusAsync();\n  return providerStatus.backgroundModeEnabled;\n}\n\n// @needsAudit\n/**\n * Registers for receiving location updates that can also come when the app is in the background.\n *\n * # Task parameters\n *\n * Background location task will be receiving following data:\n * - `locations` - An array of the new locations.\n *\n * ```ts\n * import * as TaskManager from 'expo-task-manager';\n *\n * TaskManager.defineTask(YOUR_TASK_NAME, ({ data: { locations }, error }) => {\n *  if (error) {\n *    // check `error.message` for more details.\n *    return;\n *  }\n *  console.log('Received new locations', locations);\n * });\n * ```\n *\n * @param taskName Name of the task receiving location updates.\n * @param options An object of options passed to the location manager.\n *\n * @return A promise resolving once the task with location updates is registered.\n */\nexport async function startLocationUpdatesAsync(\n  taskName: string,\n  options: LocationTaskOptions = { accuracy: LocationAccuracy.Balanced }\n): Promise<void> {\n  _validateTaskName(taskName);\n  await ExpoLocation.startLocationUpdatesAsync(taskName, options);\n}\n\n// @needsAudit\n/**\n * Stops geofencing for specified task.\n * @param taskName Name of the background location task to stop.\n * @return A promise resolving as soon as the task is unregistered.\n */\nexport async function stopLocationUpdatesAsync(taskName: string): Promise<void> {\n  _validateTaskName(taskName);\n  await ExpoLocation.stopLocationUpdatesAsync(taskName);\n}\n\n// @needsAudit\n/**\n * @param taskName Name of the location task to check.\n * @return A promise which fulfills with boolean value indicating whether the location task is\n * started or not.\n */\nexport async function hasStartedLocationUpdatesAsync(taskName: string): Promise<boolean> {\n  _validateTaskName(taskName);\n  return ExpoLocation.hasStartedLocationUpdatesAsync(taskName);\n}\n\n// --- Geofencing\n\nfunction _validateRegions(regions: LocationRegion[]) {\n  if (!regions || regions.length === 0) {\n    throw new Error(\n      'Regions array cannot be empty. Use `stopGeofencingAsync` if you want to stop geofencing all regions'\n    );\n  }\n  for (const region of regions) {\n    if (typeof region.latitude !== 'number') {\n      throw new TypeError(`Region's latitude must be a number. Got '${region.latitude}' instead.`);\n    }\n    if (typeof region.longitude !== 'number') {\n      throw new TypeError(\n        `Region's longitude must be a number. Got '${region.longitude}' instead.`\n      );\n    }\n    if (typeof region.radius !== 'number') {\n      throw new TypeError(`Region's radius must be a number. Got '${region.radius}' instead.`);\n    }\n  }\n}\n\n// @needsAudit\n/**\n * Starts geofencing for given regions. When the new event comes, the task with specified name will\n * be called with the region that the device enter to or exit from.\n * If you want to add or remove regions from already running geofencing task, you can just call\n * `startGeofencingAsync` again with the new array of regions.\n *\n * # Task parameters\n *\n * Geofencing task will be receiving following data:\n *  - `eventType` - Indicates the reason for calling the task, which can be triggered by entering or exiting the region.\n *    See [GeofencingEventType](#geofencingeventtype).\n *  - `region` - Object containing details about updated region. See [LocationRegion](#locationregion) for more details.\n *\n * @param taskName Name of the task that will be called when the device enters or exits from specified regions.\n * @param regions Array of region objects to be geofenced.\n *\n * @return A promise resolving as soon as the task is registered.\n *\n * @example\n * ```ts\n * import { GeofencingEventType } from 'expo-location';\n * import * as TaskManager from 'expo-task-manager';\n *\n *  TaskManager.defineTask(YOUR_TASK_NAME, ({ data: { eventType, region }, error }) => {\n *   if (error) {\n *     // check `error.message` for more details.\n *     return;\n *   }\n *   if (eventType === GeofencingEventType.Enter) {\n *     console.log(\"You've entered region:\", region);\n *   } else if (eventType === GeofencingEventType.Exit) {\n *     console.log(\"You've left region:\", region);\n *   }\n * });\n * ```\n */\nexport async function startGeofencingAsync(\n  taskName: string,\n  regions: LocationRegion[] = []\n): Promise<void> {\n  _validateTaskName(taskName);\n  _validateRegions(regions);\n  await ExpoLocation.startGeofencingAsync(taskName, { regions });\n}\n\n// @needsAudit\n/**\n * Stops geofencing for specified task. It unregisters the background task so the app will not be\n * receiving any updates, especially in the background.\n * @param taskName Name of the task to unregister.\n * @return A promise resolving as soon as the task is unregistered.\n */\nexport async function stopGeofencingAsync(taskName: string): Promise<void> {\n  _validateTaskName(taskName);\n  await ExpoLocation.stopGeofencingAsync(taskName);\n}\n\n// @needsAudit\n/**\n * @param taskName Name of the geofencing task to check.\n * @return A promise which fulfills with boolean value indicating whether the geofencing task is\n * started or not.\n */\nexport async function hasStartedGeofencingAsync(taskName: string): Promise<boolean> {\n  _validateTaskName(taskName);\n  return ExpoLocation.hasStartedGeofencingAsync(taskName);\n}\n\nexport { LocationEventEmitter as EventEmitter, _getCurrentWatchId };\n\nexport {\n  LocationAccuracy as Accuracy,\n  LocationActivityType as ActivityType,\n  LocationGeofencingEventType as GeofencingEventType,\n  LocationGeofencingRegionState as GeofencingRegionState,\n  PermissionStatus,\n  PermissionHookOptions,\n  setGoogleApiKey,\n};\n\nexport { installWebGeolocationPolyfill } from './GeolocationPolyfill';\nexport * from './Location.types';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}