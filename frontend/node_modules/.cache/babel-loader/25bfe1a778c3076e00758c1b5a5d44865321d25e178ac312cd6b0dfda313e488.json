{"ast":null,"code":"/**\r\n * Geocoding Service using Nominatim OpenStreetMap API\r\n * Provides address autocomplete and geocoding functionality\r\n */\n\nconst NOMINATIM_BASE_URL = \"https://nominatim.openstreetmap.org\";\nconst SEARCH_PARAMS = {\n  format: \"json\",\n  limit: \"5\",\n  countrycodes: \"us\"\n  // Removed bounded and viewbox to allow dynamic search results\n};\n\n// Request throttling to respect Nominatim usage policy (max 1 request per second)\nlet lastRequestTime = 0;\nconst MIN_REQUEST_INTERVAL = 1000; // ms\n\n/**\r\n * Search for address suggestions based on user input\r\n * Debounced and throttled to respect API limits\r\n */\nexport async function searchAddresses(query) {\n  if (!query || query.trim().length < 3) {\n    return [];\n  }\n\n  // Throttle requests\n  const now = Date.now();\n  const timeSinceLastRequest = now - lastRequestTime;\n  if (timeSinceLastRequest < MIN_REQUEST_INTERVAL) {\n    await new Promise(resolve => setTimeout(resolve, MIN_REQUEST_INTERVAL - timeSinceLastRequest));\n  }\n  try {\n    const params = new URLSearchParams({\n      ...SEARCH_PARAMS,\n      q: `${query}, San Francisco, CA`\n    });\n    const response = await fetch(`${NOMINATIM_BASE_URL}/search?${params}`, {\n      headers: {\n        \"User-Agent\": \"SafePath-App/1.0\" // Required by Nominatim usage policy\n      }\n    });\n    lastRequestTime = Date.now();\n    if (!response.ok) {\n      console.error(\"Geocoding API error:\", response.statusText);\n      return [];\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Address search error:\", error);\n    return [];\n  }\n}\n\n/**\r\n * Format address for display (shorten long addresses)\r\n */\nexport function formatAddress(displayName) {\n  // Remove country and state from display for brevity\n  const parts = displayName.split(\", \");\n  // Keep only first 3-4 parts (street, city, zip)\n  return parts.slice(0, Math.min(4, parts.length)).join(\", \");\n}","map":{"version":3,"names":["NOMINATIM_BASE_URL","SEARCH_PARAMS","format","limit","countrycodes","lastRequestTime","MIN_REQUEST_INTERVAL","searchAddresses","query","trim","length","now","Date","timeSinceLastRequest","Promise","resolve","setTimeout","params","URLSearchParams","q","response","fetch","headers","ok","console","error","statusText","data","json","formatAddress","displayName","parts","split","slice","Math","min","join"],"sources":["C:/Users/natha/AWS_Hackathon2025/frontend/src/services/geocoding.ts"],"sourcesContent":["/**\r\n * Geocoding Service using Nominatim OpenStreetMap API\r\n * Provides address autocomplete and geocoding functionality\r\n */\r\n\r\nexport interface AddressSuggestion {\r\n  display_name: string\r\n  lat: string\r\n  lon: string\r\n  place_id: number\r\n  osm_type: string\r\n  type: string\r\n}\r\n\r\nconst NOMINATIM_BASE_URL = \"https://nominatim.openstreetmap.org\"\r\nconst SEARCH_PARAMS = {\r\n  format: \"json\",\r\n  limit: \"5\",\r\n  countrycodes: \"us\",\r\n  // Removed bounded and viewbox to allow dynamic search results\r\n}\r\n\r\n// Request throttling to respect Nominatim usage policy (max 1 request per second)\r\nlet lastRequestTime = 0\r\nconst MIN_REQUEST_INTERVAL = 1000 // ms\r\n\r\n/**\r\n * Search for address suggestions based on user input\r\n * Debounced and throttled to respect API limits\r\n */\r\nexport async function searchAddresses(query: string): Promise<AddressSuggestion[]> {\r\n  if (!query || query.trim().length < 3) {\r\n    return []\r\n  }\r\n\r\n  // Throttle requests\r\n  const now = Date.now()\r\n  const timeSinceLastRequest = now - lastRequestTime\r\n  if (timeSinceLastRequest < MIN_REQUEST_INTERVAL) {\r\n    await new Promise(resolve => setTimeout(resolve, MIN_REQUEST_INTERVAL - timeSinceLastRequest))\r\n  }\r\n\r\n  try {\r\n    const params = new URLSearchParams({\r\n      ...SEARCH_PARAMS,\r\n      q: `${query}, San Francisco, CA`,\r\n    })\r\n\r\n    const response = await fetch(`${NOMINATIM_BASE_URL}/search?${params}`, {\r\n      headers: {\r\n        \"User-Agent\": \"SafePath-App/1.0\", // Required by Nominatim usage policy\r\n      },\r\n    })\r\n\r\n    lastRequestTime = Date.now()\r\n\r\n    if (!response.ok) {\r\n      console.error(\"Geocoding API error:\", response.statusText)\r\n      return []\r\n    }\r\n\r\n    const data: AddressSuggestion[] = await response.json()\r\n    return data\r\n  } catch (error) {\r\n    console.error(\"Address search error:\", error)\r\n    return []\r\n  }\r\n}\r\n\r\n/**\r\n * Format address for display (shorten long addresses)\r\n */\r\nexport function formatAddress(displayName: string): string {\r\n  // Remove country and state from display for brevity\r\n  const parts = displayName.split(\", \")\r\n  // Keep only first 3-4 parts (street, city, zip)\r\n  return parts.slice(0, Math.min(4, parts.length)).join(\", \")\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAWA,MAAMA,kBAAkB,GAAG,qCAAqC;AAChE,MAAMC,aAAa,GAAG;EACpBC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE,GAAG;EACVC,YAAY,EAAE;EACd;AACF,CAAC;;AAED;AACA,IAAIC,eAAe,GAAG,CAAC;AACvB,MAAMC,oBAAoB,GAAG,IAAI,EAAC;;AAElC;AACA;AACA;AACA;AACA,OAAO,eAAeC,eAAeA,CAACC,KAAa,EAAgC;EACjF,IAAI,CAACA,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC,CAAC,CAACC,MAAM,GAAG,CAAC,EAAE;IACrC,OAAO,EAAE;EACX;;EAEA;EACA,MAAMC,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;EACtB,MAAME,oBAAoB,GAAGF,GAAG,GAAGN,eAAe;EAClD,IAAIQ,oBAAoB,GAAGP,oBAAoB,EAAE;IAC/C,MAAM,IAAIQ,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAET,oBAAoB,GAAGO,oBAAoB,CAAC,CAAC;EAChG;EAEA,IAAI;IACF,MAAMI,MAAM,GAAG,IAAIC,eAAe,CAAC;MACjC,GAAGjB,aAAa;MAChBkB,CAAC,EAAE,GAAGX,KAAK;IACb,CAAC,CAAC;IAEF,MAAMY,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGrB,kBAAkB,WAAWiB,MAAM,EAAE,EAAE;MACrEK,OAAO,EAAE;QACP,YAAY,EAAE,kBAAkB,CAAE;MACpC;IACF,CAAC,CAAC;IAEFjB,eAAe,GAAGO,IAAI,CAACD,GAAG,CAAC,CAAC;IAE5B,IAAI,CAACS,QAAQ,CAACG,EAAE,EAAE;MAChBC,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEL,QAAQ,CAACM,UAAU,CAAC;MAC1D,OAAO,EAAE;IACX;IAEA,MAAMC,IAAyB,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IACvD,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOF,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,OAAO,EAAE;EACX;AACF;;AAEA;AACA;AACA;AACA,OAAO,SAASI,aAAaA,CAACC,WAAmB,EAAU;EACzD;EACA,MAAMC,KAAK,GAAGD,WAAW,CAACE,KAAK,CAAC,IAAI,CAAC;EACrC;EACA,OAAOD,KAAK,CAACE,KAAK,CAAC,CAAC,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEJ,KAAK,CAACrB,MAAM,CAAC,CAAC,CAAC0B,IAAI,CAAC,IAAI,CAAC;AAC7D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}