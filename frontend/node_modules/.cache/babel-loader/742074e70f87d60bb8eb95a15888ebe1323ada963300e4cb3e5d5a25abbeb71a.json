{"ast":null,"code":"// Backend API Configuration\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL || \"http://localhost:8000\";\n\n// For backward compatibility - still check if GraphHopper key is configured\nconst GRAPHHOPPER_API_KEY = process.env.REACT_APP_GRAPHHOPPER_API_KEY || \"\";\n\n/**\r\n * Calculate routes using SafePath backend\r\n * Backend will:\r\n * 1. Geocode addresses\r\n * 2. Generate 10 route variations\r\n * 3. Analyze each route against real-time crime and 311 data\r\n * 4. Return the top 3 safest routes\r\n */\nexport async function calculateRoutes(origin, destination) {\n  try {\n    console.log(`🔍 Requesting routes from backend: ${origin} → ${destination}`);\n    const response = await fetch(`${BACKEND_URL}/api/routes`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        origin,\n        destination\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.detail || `Backend error: ${response.statusText}`);\n    }\n    const data = await response.json();\n    console.log(\"✅ Received routes from backend:\", data);\n\n    // Backend returns routes with risk scores and safety scores already calculated\n    // Generate waypoints for visualization (client-side only)\n    const routesWithWaypoints = data.routes.map(route => {\n      // Generate mock waypoints based on route length\n      const numWaypoints = 3;\n      const waypoints = Array.from({\n        length: numWaypoints\n      }, (_, i) => {\n        return {\n          name: `Waypoint ${i + 1}`,\n          type: route.safetyScore >= 90 ? \"Safe area\" : route.safetyScore >= 80 ? \"Moderate area\" : \"Caution area\",\n          safe: route.safetyScore >= 85\n        };\n      });\n      return {\n        ...route,\n        // Add computed scores for backward compatibility with existing UI\n        crimeScore: route.safetyScore,\n        timeScore: route.safetyScore,\n        socialScore: route.safetyScore,\n        pedestrianScore: route.safetyScore,\n        waypoints\n      };\n    });\n    return {\n      routes: routesWithWaypoints,\n      originCoords: data.originCoords,\n      destCoords: data.destCoords\n    };\n  } catch (error) {\n    console.error(\"Backend routing error:\", error);\n\n    // Check if backend is unreachable\n    if (error instanceof TypeError && error.message.includes(\"fetch\")) {\n      throw new Error(\"Cannot connect to SafePath backend. Please ensure the backend server is running on http://localhost:8000\");\n    }\n    throw error;\n  }\n}\n\n/**\r\n * Check if backend is available\r\n */\nexport async function isBackendAvailable() {\n  try {\n    const response = await fetch(`${BACKEND_URL}/api/health`, {\n      method: \"GET\",\n      signal: AbortSignal.timeout(5000) // 5 second timeout\n    });\n    return response.ok;\n  } catch (error) {\n    console.error(\"Backend health check failed:\", error);\n    return false;\n  }\n}\n\n/**\r\n * Check if GraphHopper API key is configured (for backward compatibility)\r\n */\nexport function isGraphHopperConfigured() {\n  return GRAPHHOPPER_API_KEY.length > 0;\n}","map":{"version":3,"names":["BACKEND_URL","process","env","REACT_APP_BACKEND_URL","GRAPHHOPPER_API_KEY","REACT_APP_GRAPHHOPPER_API_KEY","calculateRoutes","origin","destination","console","log","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","catch","Error","detail","statusText","data","routesWithWaypoints","routes","map","route","numWaypoints","waypoints","Array","from","length","_","i","name","type","safetyScore","safe","crimeScore","timeScore","socialScore","pedestrianScore","originCoords","destCoords","error","TypeError","message","includes","isBackendAvailable","signal","AbortSignal","timeout","isGraphHopperConfigured"],"sources":["C:/Users/natha/AWS_Hackathon2025/frontend/src/services/graphhopper.ts"],"sourcesContent":["import type { Route } from \"@/components/safe-path-app\"\r\n\r\n// Backend API Configuration\r\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL || \"http://localhost:8000\"\r\n\r\n// For backward compatibility - still check if GraphHopper key is configured\r\nconst GRAPHHOPPER_API_KEY = process.env.REACT_APP_GRAPHHOPPER_API_KEY || \"\"\r\n\r\n/**\r\n * Calculate routes using SafePath backend\r\n * Backend will:\r\n * 1. Geocode addresses\r\n * 2. Generate 10 route variations\r\n * 3. Analyze each route against real-time crime and 311 data\r\n * 4. Return the top 3 safest routes\r\n */\r\nexport async function calculateRoutes(\r\n  origin: string,\r\n  destination: string\r\n): Promise<{ routes: Route[]; originCoords: { lat: number; lng: number }; destCoords: { lat: number; lng: number } } | null> {\r\n  try {\r\n    console.log(`🔍 Requesting routes from backend: ${origin} → ${destination}`)\r\n\r\n    const response = await fetch(`${BACKEND_URL}/api/routes`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        origin,\r\n        destination,\r\n      }),\r\n    })\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => ({}))\r\n      throw new Error(errorData.detail || `Backend error: ${response.statusText}`)\r\n    }\r\n\r\n    const data = await response.json()\r\n\r\n    console.log(\"✅ Received routes from backend:\", data)\r\n\r\n    // Backend returns routes with risk scores and safety scores already calculated\r\n    // Generate waypoints for visualization (client-side only)\r\n    const routesWithWaypoints: Route[] = data.routes.map((route: any) => {\r\n      // Generate mock waypoints based on route length\r\n      const numWaypoints = 3\r\n      const waypoints = Array.from({ length: numWaypoints }, (_, i) => {\r\n        return {\r\n          name: `Waypoint ${i + 1}`,\r\n          type: route.safetyScore >= 90 ? \"Safe area\" : route.safetyScore >= 80 ? \"Moderate area\" : \"Caution area\",\r\n          safe: route.safetyScore >= 85,\r\n        }\r\n      })\r\n\r\n      return {\r\n        ...route,\r\n        // Add computed scores for backward compatibility with existing UI\r\n        crimeScore: route.safetyScore,\r\n        timeScore: route.safetyScore,\r\n        socialScore: route.safetyScore,\r\n        pedestrianScore: route.safetyScore,\r\n        waypoints,\r\n      }\r\n    })\r\n\r\n    return {\r\n      routes: routesWithWaypoints,\r\n      originCoords: data.originCoords,\r\n      destCoords: data.destCoords,\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Backend routing error:\", error)\r\n\r\n    // Check if backend is unreachable\r\n    if (error instanceof TypeError && error.message.includes(\"fetch\")) {\r\n      throw new Error(\"Cannot connect to SafePath backend. Please ensure the backend server is running on http://localhost:8000\")\r\n    }\r\n\r\n    throw error\r\n  }\r\n}\r\n\r\n/**\r\n * Check if backend is available\r\n */\r\nexport async function isBackendAvailable(): Promise<boolean> {\r\n  try {\r\n    const response = await fetch(`${BACKEND_URL}/api/health`, {\r\n      method: \"GET\",\r\n      signal: AbortSignal.timeout(5000), // 5 second timeout\r\n    })\r\n    return response.ok\r\n  } catch (error) {\r\n    console.error(\"Backend health check failed:\", error)\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * Check if GraphHopper API key is configured (for backward compatibility)\r\n */\r\nexport function isGraphHopperConfigured(): boolean {\r\n  return GRAPHHOPPER_API_KEY.length > 0\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}