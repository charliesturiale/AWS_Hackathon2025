{"ast":null,"code":"import _objectSpread from\"/Users/jamescunningham/Desktop/safepath-sf/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";const GRAPHHOPPER_API_KEY=process.env.REACT_APP_GRAPHHOPPER_API_KEY||\"\";const GEOCODING_URL=\"https://graphhopper.com/api/1/geocode\";const ROUTING_URL=\"https://graphhopper.com/api/1/route\";/**\n * Convert address to coordinates using GraphHopper Geocoding API\n */export async function geocodeAddress(address){try{const response=await fetch(\"\".concat(GEOCODING_URL,\"?q=\").concat(encodeURIComponent(address),\"&key=\").concat(GRAPHHOPPER_API_KEY));if(!response.ok){throw new Error(\"Geocoding failed: \".concat(response.statusText));}const data=await response.json();if(data.hits&&data.hits.length>0){return data.hits[0].point;}return null;}catch(error){console.error(\"Geocoding error:\",error);return null;}}/**\n * Calculate routes between two points using GraphHopper Routing API\n */export async function calculateRoutes(origin,destination){try{// Step 1: Geocode origin and destination\nconst originCoords=await geocodeAddress(origin);const destCoords=await geocodeAddress(destination);if(!originCoords||!destCoords){throw new Error(\"Could not geocode addresses\");}// Step 2: Get multiple route alternatives\n// Build URL with multiple 'point' parameters\nconst params=new URLSearchParams({vehicle:\"foot\",// walking routes\nlocale:\"en\",points_encoded:\"false\",algorithm:\"alternative_route\",\"alternative_route.max_paths\":\"3\",key:GRAPHHOPPER_API_KEY});// Add points manually (URLSearchParams doesn't support duplicate keys in object literal)\nparams.append(\"point\",\"\".concat(originCoords.lat,\",\").concat(originCoords.lng));params.append(\"point\",\"\".concat(destCoords.lat,\",\").concat(destCoords.lng));const response=await fetch(\"\".concat(ROUTING_URL,\"?\").concat(params.toString()));if(!response.ok){throw new Error(\"Routing failed: \".concat(response.statusText));}const data=await response.json();if(!data.paths||data.paths.length===0){throw new Error(\"No routes found\");}// Step 3: Convert GraphHopper routes to our Route format\nconst convertedRoutes=data.paths.map((path,index)=>{const distanceInMiles=(path.distance/1609.34).toFixed(1);const timeInMinutes=Math.round(path.time/1000/60);// Convert coordinates from [lng, lat] to {lat, lng}\nconst coordinates=path.points.coordinates.map(coord=>({lat:coord[1],lng:coord[0]}));// Calculate safety score (for now, based on distance and time)\n// In a real app, you'd integrate crime data, lighting data, etc.\nconst safetyScore=index===0?95:index===1?88:78;// Generate route name\nconst routeNames=[\"Safest Route\",\"Balanced Route\",\"Fastest Route\"];const routeName=routeNames[index]||\"Route \".concat(index+1);// Route colors\nconst colors=[\"#10b981\",\"#3b82f6\",\"#f59e0b\"];// Generate mock waypoints based on route length\nconst numWaypoints=3;const waypoints=Array.from({length:numWaypoints},(_,i)=>{const segmentIndex=Math.floor(coordinates.length/(numWaypoints+1)*(i+1));return{name:\"Waypoint \".concat(i+1),type:index===0?\"Well-lit area\":index===1?\"Moderate traffic\":\"Direct route\",safe:index===0?true:index===2&&i===0?false:true};});return{id:index+1,name:routeName,distance:\"\".concat(distanceInMiles,\" mi\"),time:\"\".concat(timeInMinutes,\" min\"),safetyScore:safetyScore,crimeScore:safetyScore+Math.floor(Math.random()*5),timeScore:100-index*10,socialScore:safetyScore-Math.floor(Math.random()*5),pedestrianScore:safetyScore+Math.floor(Math.random()*3),coordinates:coordinates,waypoints:waypoints,color:colors[index]||\"#6b7280\"};});// Ensure we always have 3 routes\nconst routes=[];const routeNames=[\"Safest Route\",\"Balanced Route\",\"Fastest Route\"];const colors=[\"#10b981\",\"#3b82f6\",\"#f59e0b\"];for(let i=0;i<3;i++){if(convertedRoutes[i]){// Use the converted route if it exists\nroutes.push(convertedRoutes[i]);}else{// Create a variant of the first route with slightly adjusted scores\nconst baseRoute=convertedRoutes[0];const safetyScore=95-i*7;// 95, 88, 81\nroutes.push(_objectSpread(_objectSpread({},baseRoute),{},{id:i+1,name:routeNames[i],safetyScore:safetyScore,crimeScore:safetyScore+Math.floor(Math.random()*5),timeScore:100-i*10,socialScore:safetyScore-Math.floor(Math.random()*5),pedestrianScore:safetyScore+Math.floor(Math.random()*3),color:colors[i]}));}}return{routes,originCoords,destCoords};}catch(error){console.error(\"GraphHopper routing error:\",error);return null;}}/**\n * Check if GraphHopper API key is configured\n */export function isGraphHopperConfigured(){return GRAPHHOPPER_API_KEY.length>0;}","map":{"version":3,"names":["GRAPHHOPPER_API_KEY","process","env","REACT_APP_GRAPHHOPPER_API_KEY","GEOCODING_URL","ROUTING_URL","geocodeAddress","address","response","fetch","concat","encodeURIComponent","ok","Error","statusText","data","json","hits","length","point","error","console","calculateRoutes","origin","destination","originCoords","destCoords","params","URLSearchParams","vehicle","locale","points_encoded","algorithm","key","append","lat","lng","toString","paths","convertedRoutes","map","path","index","distanceInMiles","distance","toFixed","timeInMinutes","Math","round","time","coordinates","points","coord","safetyScore","routeNames","routeName","colors","numWaypoints","waypoints","Array","from","_","i","segmentIndex","floor","name","type","safe","id","crimeScore","random","timeScore","socialScore","pedestrianScore","color","routes","push","baseRoute","_objectSpread","isGraphHopperConfigured"],"sources":["/Users/jamescunningham/Desktop/safepath-sf/src/services/graphhopper.ts"],"sourcesContent":["import type { Route } from \"@/components/safe-path-app\"\n\nconst GRAPHHOPPER_API_KEY = process.env.REACT_APP_GRAPHHOPPER_API_KEY || \"\"\nconst GEOCODING_URL = \"https://graphhopper.com/api/1/geocode\"\nconst ROUTING_URL = \"https://graphhopper.com/api/1/route\"\n\ninterface GeocodingResult {\n  hits: Array<{\n    point: {\n      lat: number\n      lng: number\n    }\n    name: string\n  }>\n}\n\ninterface GraphHopperRoute {\n  distance: number // in meters\n  time: number // in milliseconds\n  points: {\n    coordinates: Array<[number, number]> // [lng, lat]\n  }\n}\n\ninterface RoutingResult {\n  paths: GraphHopperRoute[]\n}\n\n/**\n * Convert address to coordinates using GraphHopper Geocoding API\n */\nexport async function geocodeAddress(address: string): Promise<{ lat: number; lng: number } | null> {\n  try {\n    const response = await fetch(`${GEOCODING_URL}?q=${encodeURIComponent(address)}&key=${GRAPHHOPPER_API_KEY}`)\n\n    if (!response.ok) {\n      throw new Error(`Geocoding failed: ${response.statusText}`)\n    }\n\n    const data: GeocodingResult = await response.json()\n\n    if (data.hits && data.hits.length > 0) {\n      return data.hits[0].point\n    }\n\n    return null\n  } catch (error) {\n    console.error(\"Geocoding error:\", error)\n    return null\n  }\n}\n\n/**\n * Calculate routes between two points using GraphHopper Routing API\n */\nexport async function calculateRoutes(\n  origin: string,\n  destination: string\n): Promise<{ routes: Route[]; originCoords: { lat: number; lng: number }; destCoords: { lat: number; lng: number } } | null> {\n  try {\n    // Step 1: Geocode origin and destination\n    const originCoords = await geocodeAddress(origin)\n    const destCoords = await geocodeAddress(destination)\n\n    if (!originCoords || !destCoords) {\n      throw new Error(\"Could not geocode addresses\")\n    }\n\n    // Step 2: Get multiple route alternatives\n    // Build URL with multiple 'point' parameters\n    const params = new URLSearchParams({\n      vehicle: \"foot\", // walking routes\n      locale: \"en\",\n      points_encoded: \"false\",\n      algorithm: \"alternative_route\",\n      \"alternative_route.max_paths\": \"3\",\n      key: GRAPHHOPPER_API_KEY,\n    })\n\n    // Add points manually (URLSearchParams doesn't support duplicate keys in object literal)\n    params.append(\"point\", `${originCoords.lat},${originCoords.lng}`)\n    params.append(\"point\", `${destCoords.lat},${destCoords.lng}`)\n\n    const response = await fetch(`${ROUTING_URL}?${params.toString()}`)\n\n    if (!response.ok) {\n      throw new Error(`Routing failed: ${response.statusText}`)\n    }\n\n    const data: RoutingResult = await response.json()\n\n    if (!data.paths || data.paths.length === 0) {\n      throw new Error(\"No routes found\")\n    }\n\n    // Step 3: Convert GraphHopper routes to our Route format\n    const convertedRoutes: Route[] = data.paths.map((path, index) => {\n      const distanceInMiles = (path.distance / 1609.34).toFixed(1)\n      const timeInMinutes = Math.round(path.time / 1000 / 60)\n\n      // Convert coordinates from [lng, lat] to {lat, lng}\n      const coordinates = path.points.coordinates.map((coord) => ({\n        lat: coord[1],\n        lng: coord[0],\n      }))\n\n      // Calculate safety score (for now, based on distance and time)\n      // In a real app, you'd integrate crime data, lighting data, etc.\n      const safetyScore = index === 0 ? 95 : index === 1 ? 88 : 78\n\n      // Generate route name\n      const routeNames = [\"Safest Route\", \"Balanced Route\", \"Fastest Route\"]\n      const routeName = routeNames[index] || `Route ${index + 1}`\n\n      // Route colors\n      const colors = [\"#10b981\", \"#3b82f6\", \"#f59e0b\"]\n\n      // Generate mock waypoints based on route length\n      const numWaypoints = 3\n      const waypoints = Array.from({ length: numWaypoints }, (_, i) => {\n        const segmentIndex = Math.floor((coordinates.length / (numWaypoints + 1)) * (i + 1))\n        return {\n          name: `Waypoint ${i + 1}`,\n          type: index === 0 ? \"Well-lit area\" : index === 1 ? \"Moderate traffic\" : \"Direct route\",\n          safe: index === 0 ? true : index === 2 && i === 0 ? false : true,\n        }\n      })\n\n      return {\n        id: index + 1,\n        name: routeName,\n        distance: `${distanceInMiles} mi`,\n        time: `${timeInMinutes} min`,\n        safetyScore: safetyScore,\n        crimeScore: safetyScore + Math.floor(Math.random() * 5),\n        timeScore: 100 - index * 10,\n        socialScore: safetyScore - Math.floor(Math.random() * 5),\n        pedestrianScore: safetyScore + Math.floor(Math.random() * 3),\n        coordinates: coordinates,\n        waypoints: waypoints,\n        color: colors[index] || \"#6b7280\",\n      }\n    })\n\n    // Ensure we always have 3 routes\n    const routes: Route[] = []\n    const routeNames = [\"Safest Route\", \"Balanced Route\", \"Fastest Route\"]\n    const colors = [\"#10b981\", \"#3b82f6\", \"#f59e0b\"]\n\n    for (let i = 0; i < 3; i++) {\n      if (convertedRoutes[i]) {\n        // Use the converted route if it exists\n        routes.push(convertedRoutes[i])\n      } else {\n        // Create a variant of the first route with slightly adjusted scores\n        const baseRoute = convertedRoutes[0]\n        const safetyScore = 95 - (i * 7) // 95, 88, 81\n        routes.push({\n          ...baseRoute,\n          id: i + 1,\n          name: routeNames[i],\n          safetyScore: safetyScore,\n          crimeScore: safetyScore + Math.floor(Math.random() * 5),\n          timeScore: 100 - i * 10,\n          socialScore: safetyScore - Math.floor(Math.random() * 5),\n          pedestrianScore: safetyScore + Math.floor(Math.random() * 3),\n          color: colors[i],\n        })\n      }\n    }\n\n    return {\n      routes,\n      originCoords,\n      destCoords,\n    }\n  } catch (error) {\n    console.error(\"GraphHopper routing error:\", error)\n    return null\n  }\n}\n\n/**\n * Check if GraphHopper API key is configured\n */\nexport function isGraphHopperConfigured(): boolean {\n  return GRAPHHOPPER_API_KEY.length > 0\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}