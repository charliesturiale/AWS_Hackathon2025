{"ast":null,"code":"import _objectSpread from\"/Users/jamescunningham/Desktop/safepath-sf/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Cache configuration\nconst CACHE_DURATION=15*60*1000;// 15 minutes\nconst cache=new Map();/**\n * Fetch 311 service requests for encampments and aggressive/threatening incidents\n */async function fetch311Incidents(){const cacheKey='311_incidents';const cached=cache.get(cacheKey);if(cached&&Date.now()-cached.timestamp<CACHE_DURATION){return cached.data;}try{// Get date filter for last 30 days\nconst dateFilter=new Date();dateFilter.setDate(dateFilter.getDate()-30);const dateString=dateFilter.toISOString().split('T')[0];const url=\"https://data.sfgov.org/resource/vw6y-z8j6.json?$where=(service_name like '%25Aggressive%25' OR service_name like '%25Threatening%25' OR service_name like '%25Encampment%25') AND requested_datetime >= '\".concat(dateString,\"'&$order=requested_datetime DESC&$limit=1000\");const response=await fetch(url,{headers:_objectSpread({'Accept':'application/json'},process.env.REACT_APP_DATASF_API_KEY&&{'X-App-Token':process.env.REACT_APP_DATASF_API_KEY})});if(!response.ok){throw new Error(\"311 API error: \".concat(response.statusText));}const data=await response.json();const incidents=data.filter(item=>item.lat&&item.long).map(item=>{var _item$service_name,_item$service_name2;return{id:item.service_request_id,type:(_item$service_name=item.service_name)!==null&&_item$service_name!==void 0&&_item$service_name.toLowerCase().includes('encampment')?'encampment':'aggressive',severity:(_item$service_name2=item.service_name)!==null&&_item$service_name2!==void 0&&_item$service_name2.toLowerCase().includes('aggressive')?'high':'medium',location:{lat:parseFloat(item.lat),lng:parseFloat(item.long)},datetime:new Date(item.requested_datetime),description:\"\".concat(item.service_name,\": \").concat(item.service_subtype||''),status:item.status_description};});cache.set(cacheKey,{data:incidents,timestamp:Date.now()});return incidents;}catch(error){console.error('Error fetching 311 data:',error);return[];}}/**\n * Fetch SFPD dispatch reports for serious crimes\n */async function fetchDispatchIncidents(){const cacheKey='dispatch_incidents';const cached=cache.get(cacheKey);if(cached&&Date.now()-cached.timestamp<CACHE_DURATION){return cached.data;}try{const highSeverityTypes=['Explosive Device Found','Mentally Disturbed Person','Threats / Harassment','Robbery','Assault / Battery','Burglary'];const typeFilter=highSeverityTypes.map(type=>\"call_type_original_desc='\".concat(type,\"'\")).join(' OR ');const url=\"https://data.sfgov.org/resource/nwbb-fxkq.json?$where=(\".concat(typeFilter,\")&$order=entry_datetime DESC&$limit=500\");const response=await fetch(url,{headers:_objectSpread({'Accept':'application/json'},process.env.REACT_APP_DATASF_API_KEY&&{'X-App-Token':process.env.REACT_APP_DATASF_API_KEY})});if(!response.ok){throw new Error(\"Dispatch API error: \".concat(response.statusText));}const data=await response.json();const incidents=data.filter(item=>item.location).map(item=>{var _item$call_type_origi;const isHighSeverity=['Explosive Device Found','Robbery','Assault / Battery','Threats / Harassment'].includes(item.call_type_original_desc);return{id:item.cadid,type:(_item$call_type_origi=item.call_type_original_desc)!==null&&_item$call_type_origi!==void 0&&_item$call_type_origi.includes('Suspicious')?'suspicious':'crime',severity:isHighSeverity?'high':'medium',location:{lat:parseFloat(item.location.latitude),lng:parseFloat(item.location.longitude)},datetime:new Date(item.entry_datetime),description:item.call_type_original_desc,status:item.disposition||'Active'};});cache.set(cacheKey,{data:incidents,timestamp:Date.now()});return incidents;}catch(error){console.error('Error fetching dispatch data:',error);return[];}}/**\n * Calculate distance between two coordinates in meters\n */function calculateDistance(lat1,lng1,lat2,lng2){const R=6371e3;// Earth's radius in meters\nconst φ1=lat1*Math.PI/180;const φ2=lat2*Math.PI/180;const Δφ=(lat2-lat1)*Math.PI/180;const Δλ=(lng2-lng1)*Math.PI/180;const a=Math.sin(Δφ/2)*Math.sin(Δφ/2)+Math.cos(φ1)*Math.cos(φ2)*Math.sin(Δλ/2)*Math.sin(Δλ/2);const c=2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a));return R*c;}/**\n * Get safety data for a specific location or route\n */export async function getSafetyDataForLocation(lat,lng){let radiusMeters=arguments.length>2&&arguments[2]!==undefined?arguments[2]:500;const[incidents311,dispatchIncidents]=await Promise.all([fetch311Incidents(),fetchDispatchIncidents()]);const allIncidents=[...incidents311,...dispatchIncidents];// Filter incidents within radius\nconst nearbyIncidents=allIncidents.filter(incident=>{const distance=calculateDistance(lat,lng,incident.location.lat,incident.location.lng);return distance<=radiusMeters;});// Calculate safety scores based on incident proximity and severity\nconst highSeverity=nearbyIncidents.filter(i=>i.severity==='high').length;const mediumSeverity=nearbyIncidents.filter(i=>i.severity==='medium').length;const lowSeverity=nearbyIncidents.filter(i=>i.severity==='low').length;// Base score starts at 100 and decreases based on incidents\nlet safetyScore=100;safetyScore-=highSeverity*15;// High severity incidents have major impact\nsafetyScore-=mediumSeverity*8;safetyScore-=lowSeverity*3;safetyScore=Math.max(0,Math.min(100,safetyScore));// Crime score specifically for crime-related incidents\nconst crimeIncidents=nearbyIncidents.filter(i=>i.type==='crime').length;let crimeScore=100-crimeIncidents*10;crimeScore=Math.max(0,Math.min(100,crimeScore));// Social score based on encampments and aggressive behavior\nconst socialIncidents=nearbyIncidents.filter(i=>i.type==='encampment'||i.type==='aggressive').length;let socialScore=100-socialIncidents*12;socialScore=Math.max(0,Math.min(100,socialScore));// Pedestrian score based on all incidents but weighted less\nlet pedestrianScore=100-nearbyIncidents.length*5;pedestrianScore=Math.max(0,Math.min(100,pedestrianScore));return{safetyScore,crimeScore,socialScore,pedestrianScore,incidents:nearbyIncidents};}/**\n * Calculate safety score for an entire route\n */export async function getRouteSefetyScore(coordinates){// Sample points along the route (every 5th coordinate to reduce API calls)\nconst samplePoints=coordinates.filter((_,index)=>index%5===0);// Get safety data for each sample point\nconst safetyDataPromises=samplePoints.map(coord=>getSafetyDataForLocation(coord.lat,coord.lng,250)// 250m radius for route points\n);const safetyDataArray=await Promise.all(safetyDataPromises);// Average the scores across all sample points\nconst avgSafetyScore=Math.round(safetyDataArray.reduce((acc,data)=>acc+data.safetyScore,0)/safetyDataArray.length);const avgCrimeScore=Math.round(safetyDataArray.reduce((acc,data)=>acc+data.crimeScore,0)/safetyDataArray.length);const avgSocialScore=Math.round(safetyDataArray.reduce((acc,data)=>acc+data.socialScore,0)/safetyDataArray.length);const avgPedestrianScore=Math.round(safetyDataArray.reduce((acc,data)=>acc+data.pedestrianScore,0)/safetyDataArray.length);// Collect all unique incidents along the route\nconst allIncidents=new Map();safetyDataArray.forEach(data=>{data.incidents.forEach(incident=>{allIncidents.set(incident.id,incident);});});return{safetyScore:avgSafetyScore,crimeScore:avgCrimeScore,socialScore:avgSocialScore,pedestrianScore:avgPedestrianScore,incidents:Array.from(allIncidents.values())};}/**\n * Get recent high-severity incidents for display on map\n */export async function getRecentIncidents(){const[incidents311,dispatchIncidents]=await Promise.all([fetch311Incidents(),fetchDispatchIncidents()]);// Filter for incidents in last 48 hours\nconst cutoffTime=new Date();cutoffTime.setHours(cutoffTime.getHours()-48);return[...incidents311,...dispatchIncidents].filter(incident=>incident.datetime>cutoffTime).sort((a,b)=>b.datetime.getTime()-a.datetime.getTime()).slice(0,100);// Limit to most recent 100 incidents\n}","map":{"version":3,"names":["CACHE_DURATION","cache","Map","fetch311Incidents","cacheKey","cached","get","Date","now","timestamp","data","dateFilter","setDate","getDate","dateString","toISOString","split","url","concat","response","fetch","headers","_objectSpread","process","env","REACT_APP_DATASF_API_KEY","ok","Error","statusText","json","incidents","filter","item","lat","long","map","_item$service_name","_item$service_name2","id","service_request_id","type","service_name","toLowerCase","includes","severity","location","parseFloat","lng","datetime","requested_datetime","description","service_subtype","status","status_description","set","error","console","fetchDispatchIncidents","highSeverityTypes","typeFilter","join","_item$call_type_origi","isHighSeverity","call_type_original_desc","cadid","latitude","longitude","entry_datetime","disposition","calculateDistance","lat1","lng1","lat2","lng2","R","φ1","Math","PI","φ2","Δφ","Δλ","a","sin","cos","c","atan2","sqrt","getSafetyDataForLocation","radiusMeters","arguments","length","undefined","incidents311","dispatchIncidents","Promise","all","allIncidents","nearbyIncidents","incident","distance","highSeverity","i","mediumSeverity","lowSeverity","safetyScore","max","min","crimeIncidents","crimeScore","socialIncidents","socialScore","pedestrianScore","getRouteSefetyScore","coordinates","samplePoints","_","index","safetyDataPromises","coord","safetyDataArray","avgSafetyScore","round","reduce","acc","avgCrimeScore","avgSocialScore","avgPedestrianScore","forEach","Array","from","values","getRecentIncidents","cutoffTime","setHours","getHours","sort","b","getTime","slice"],"sources":["/Users/jamescunningham/Desktop/safepath-sf/src/services/SafetyDataService.ts"],"sourcesContent":["interface Incident {\n  id: string\n  type: 'encampment' | 'aggressive' | 'crime' | 'suspicious'\n  severity: 'low' | 'medium' | 'high'\n  location: {\n    lat: number\n    lng: number\n  }\n  datetime: Date\n  description: string\n  status: string\n}\n\ninterface SafetyMetrics {\n  safetyScore: number\n  crimeScore: number\n  socialScore: number\n  pedestrianScore: number\n  incidents: Incident[]\n}\n\n// Cache configuration\nconst CACHE_DURATION = 15 * 60 * 1000 // 15 minutes\nconst cache = new Map<string, { data: any; timestamp: number }>()\n\n/**\n * Fetch 311 service requests for encampments and aggressive/threatening incidents\n */\nasync function fetch311Incidents(): Promise<Incident[]> {\n  const cacheKey = '311_incidents'\n  const cached = cache.get(cacheKey)\n  \n  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n    return cached.data\n  }\n  \n  try {\n    // Get date filter for last 30 days\n    const dateFilter = new Date()\n    dateFilter.setDate(dateFilter.getDate() - 30)\n    const dateString = dateFilter.toISOString().split('T')[0]\n    \n    const url = `https://data.sfgov.org/resource/vw6y-z8j6.json?$where=(service_name like '%25Aggressive%25' OR service_name like '%25Threatening%25' OR service_name like '%25Encampment%25') AND requested_datetime >= '${dateString}'&$order=requested_datetime DESC&$limit=1000`\n    \n    const response = await fetch(url, {\n      headers: {\n        'Accept': 'application/json',\n        ...(process.env.REACT_APP_DATASF_API_KEY && {\n          'X-App-Token': process.env.REACT_APP_DATASF_API_KEY\n        })\n      }\n    })\n    \n    if (!response.ok) {\n      throw new Error(`311 API error: ${response.statusText}`)\n    }\n    \n    const data = await response.json()\n    \n    const incidents: Incident[] = data\n      .filter((item: any) => item.lat && item.long)\n      .map((item: any) => ({\n        id: item.service_request_id,\n        type: item.service_name?.toLowerCase().includes('encampment') ? 'encampment' : 'aggressive',\n        severity: item.service_name?.toLowerCase().includes('aggressive') ? 'high' : 'medium',\n        location: {\n          lat: parseFloat(item.lat),\n          lng: parseFloat(item.long)\n        },\n        datetime: new Date(item.requested_datetime),\n        description: `${item.service_name}: ${item.service_subtype || ''}`,\n        status: item.status_description\n      }))\n    \n    cache.set(cacheKey, { data: incidents, timestamp: Date.now() })\n    return incidents\n  } catch (error) {\n    console.error('Error fetching 311 data:', error)\n    return []\n  }\n}\n\n/**\n * Fetch SFPD dispatch reports for serious crimes\n */\nasync function fetchDispatchIncidents(): Promise<Incident[]> {\n  const cacheKey = 'dispatch_incidents'\n  const cached = cache.get(cacheKey)\n  \n  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n    return cached.data\n  }\n  \n  try {\n    const highSeverityTypes = [\n      'Explosive Device Found',\n      'Mentally Disturbed Person',\n      'Threats / Harassment', \n      'Robbery',\n      'Assault / Battery',\n      'Burglary'\n    ]\n    \n    const typeFilter = highSeverityTypes.map(type => \n      `call_type_original_desc='${type}'`\n    ).join(' OR ')\n    \n    const url = `https://data.sfgov.org/resource/nwbb-fxkq.json?$where=(${typeFilter})&$order=entry_datetime DESC&$limit=500`\n    \n    const response = await fetch(url, {\n      headers: {\n        'Accept': 'application/json',\n        ...(process.env.REACT_APP_DATASF_API_KEY && {\n          'X-App-Token': process.env.REACT_APP_DATASF_API_KEY\n        })\n      }\n    })\n    \n    if (!response.ok) {\n      throw new Error(`Dispatch API error: ${response.statusText}`)\n    }\n    \n    const data = await response.json()\n    \n    const incidents: Incident[] = data\n      .filter((item: any) => item.location)\n      .map((item: any) => {\n        const isHighSeverity = [\n          'Explosive Device Found',\n          'Robbery',\n          'Assault / Battery',\n          'Threats / Harassment'\n        ].includes(item.call_type_original_desc)\n        \n        return {\n          id: item.cadid,\n          type: item.call_type_original_desc?.includes('Suspicious') ? 'suspicious' : 'crime',\n          severity: isHighSeverity ? 'high' : 'medium',\n          location: {\n            lat: parseFloat(item.location.latitude),\n            lng: parseFloat(item.location.longitude)\n          },\n          datetime: new Date(item.entry_datetime),\n          description: item.call_type_original_desc,\n          status: item.disposition || 'Active'\n        }\n      })\n    \n    cache.set(cacheKey, { data: incidents, timestamp: Date.now() })\n    return incidents\n  } catch (error) {\n    console.error('Error fetching dispatch data:', error)\n    return []\n  }\n}\n\n/**\n * Calculate distance between two coordinates in meters\n */\nfunction calculateDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\n  const R = 6371e3 // Earth's radius in meters\n  const φ1 = lat1 * Math.PI / 180\n  const φ2 = lat2 * Math.PI / 180\n  const Δφ = (lat2 - lat1) * Math.PI / 180\n  const Δλ = (lng2 - lng1) * Math.PI / 180\n\n  const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\n    Math.cos(φ1) * Math.cos(φ2) *\n    Math.sin(Δλ / 2) * Math.sin(Δλ / 2)\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n\n  return R * c\n}\n\n/**\n * Get safety data for a specific location or route\n */\nexport async function getSafetyDataForLocation(\n  lat: number,\n  lng: number,\n  radiusMeters: number = 500\n): Promise<SafetyMetrics> {\n  const [incidents311, dispatchIncidents] = await Promise.all([\n    fetch311Incidents(),\n    fetchDispatchIncidents()\n  ])\n  \n  const allIncidents = [...incidents311, ...dispatchIncidents]\n  \n  // Filter incidents within radius\n  const nearbyIncidents = allIncidents.filter(incident => {\n    const distance = calculateDistance(lat, lng, incident.location.lat, incident.location.lng)\n    return distance <= radiusMeters\n  })\n  \n  // Calculate safety scores based on incident proximity and severity\n  const highSeverity = nearbyIncidents.filter(i => i.severity === 'high').length\n  const mediumSeverity = nearbyIncidents.filter(i => i.severity === 'medium').length\n  const lowSeverity = nearbyIncidents.filter(i => i.severity === 'low').length\n  \n  // Base score starts at 100 and decreases based on incidents\n  let safetyScore = 100\n  safetyScore -= highSeverity * 15 // High severity incidents have major impact\n  safetyScore -= mediumSeverity * 8\n  safetyScore -= lowSeverity * 3\n  safetyScore = Math.max(0, Math.min(100, safetyScore))\n  \n  // Crime score specifically for crime-related incidents\n  const crimeIncidents = nearbyIncidents.filter(i => i.type === 'crime').length\n  let crimeScore = 100 - (crimeIncidents * 10)\n  crimeScore = Math.max(0, Math.min(100, crimeScore))\n  \n  // Social score based on encampments and aggressive behavior\n  const socialIncidents = nearbyIncidents.filter(i => \n    i.type === 'encampment' || i.type === 'aggressive'\n  ).length\n  let socialScore = 100 - (socialIncidents * 12)\n  socialScore = Math.max(0, Math.min(100, socialScore))\n  \n  // Pedestrian score based on all incidents but weighted less\n  let pedestrianScore = 100 - (nearbyIncidents.length * 5)\n  pedestrianScore = Math.max(0, Math.min(100, pedestrianScore))\n  \n  return {\n    safetyScore,\n    crimeScore, \n    socialScore,\n    pedestrianScore,\n    incidents: nearbyIncidents\n  }\n}\n\n/**\n * Calculate safety score for an entire route\n */\nexport async function getRouteSefetyScore(\n  coordinates: Array<{ lat: number; lng: number }>\n): Promise<SafetyMetrics> {\n  // Sample points along the route (every 5th coordinate to reduce API calls)\n  const samplePoints = coordinates.filter((_, index) => index % 5 === 0)\n  \n  // Get safety data for each sample point\n  const safetyDataPromises = samplePoints.map(coord => \n    getSafetyDataForLocation(coord.lat, coord.lng, 250) // 250m radius for route points\n  )\n  \n  const safetyDataArray = await Promise.all(safetyDataPromises)\n  \n  // Average the scores across all sample points\n  const avgSafetyScore = Math.round(\n    safetyDataArray.reduce((acc, data) => acc + data.safetyScore, 0) / safetyDataArray.length\n  )\n  const avgCrimeScore = Math.round(\n    safetyDataArray.reduce((acc, data) => acc + data.crimeScore, 0) / safetyDataArray.length\n  )\n  const avgSocialScore = Math.round(\n    safetyDataArray.reduce((acc, data) => acc + data.socialScore, 0) / safetyDataArray.length\n  )\n  const avgPedestrianScore = Math.round(\n    safetyDataArray.reduce((acc, data) => acc + data.pedestrianScore, 0) / safetyDataArray.length\n  )\n  \n  // Collect all unique incidents along the route\n  const allIncidents = new Map<string, Incident>()\n  safetyDataArray.forEach(data => {\n    data.incidents.forEach(incident => {\n      allIncidents.set(incident.id, incident)\n    })\n  })\n  \n  return {\n    safetyScore: avgSafetyScore,\n    crimeScore: avgCrimeScore,\n    socialScore: avgSocialScore,\n    pedestrianScore: avgPedestrianScore,\n    incidents: Array.from(allIncidents.values())\n  }\n}\n\n/**\n * Get recent high-severity incidents for display on map\n */\nexport async function getRecentIncidents(): Promise<Incident[]> {\n  const [incidents311, dispatchIncidents] = await Promise.all([\n    fetch311Incidents(),\n    fetchDispatchIncidents()\n  ])\n  \n  // Filter for incidents in last 48 hours\n  const cutoffTime = new Date()\n  cutoffTime.setHours(cutoffTime.getHours() - 48)\n  \n  return [...incidents311, ...dispatchIncidents]\n    .filter(incident => incident.datetime > cutoffTime)\n    .sort((a, b) => b.datetime.getTime() - a.datetime.getTime())\n    .slice(0, 100) // Limit to most recent 100 incidents\n}\n\nexport type { Incident, SafetyMetrics }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}