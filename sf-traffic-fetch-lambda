import os
import io
import json
import gzip
import boto3
import requests
import datetime as dt

# -----------------------------
# Clients
# -----------------------------
s3 = boto3.client("s3")
secrets = boto3.client("secretsmanager")

# -----------------------------
# Environment variables
# -----------------------------
SECRET_ARN = os.getenv("SF_API_SECRET_ARN")
BUCKET = os.getenv("BUCKET", "sf-safety-data-bucket")
PREFIX = os.getenv("PREFIX", "raw/traffic/")

# -----------------------------
# Helper: Retrieve API key
# -----------------------------
def get_api_key():
    try:
        response = secrets.get_secret_value(SecretId=SECRET_ARN)
        secret_dict = json.loads(response["SecretString"])
        return secret_dict["api_key3"]
    except Exception as e:
        print(f"Error fetching API key: {e}")
        raise

# -----------------------------
# Main handler
# -----------------------------
def lambda_handler(event, context):
    try:
        api_key = get_api_key()

        # ðŸ”„ Update this URL for your new API!
        url = "https://data.sfgov.org/resource/vw6y-z8j6.json?$limit=500"

        headers = {"X-App-Token": api_key}
        response = requests.get(url, headers=headers, timeout=30)
        response.raise_for_status()
        data = response.json()

        if not data:
            print("No data returned from API.")
            return {"status": "no_data", "records": 0}

        # compress
        buffer = io.BytesIO()
        with gzip.GzipFile(fileobj=buffer, mode="wb") as gz:
            for row in data:
                gz.write((json.dumps(row) + "\n").encode("utf-8"))

        key = f"{PREFIX}{dt.datetime.utcnow():%Y/%m/%d}/sfdata.json.gz"

        s3.put_object(
            Bucket=BUCKET,
            Key=key,
            Body=buffer.getvalue(),
            ContentType="application/x-ndjson",
            ContentEncoding="gzip"
        )

        print(f"Uploaded {len(data)} records to s3://{BUCKET}/{key}")
        return {"status": "uploaded", "records": len(data), "key": key}

    except requests.exceptions.HTTPError as e:
        print(f"HTTP Error: {e}")
        raise
    except Exception as e:
        print(f"Unexpected error: {e}")
        raise
